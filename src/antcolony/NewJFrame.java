/*//GEN-FIRST:event_jButton1ActionPerformed
 * To change this license header, choose License Headers in Project Properties.//GEN-LAST:event_jButton1ActionPerformed
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package antcolony;

/**
 *
 * @author busra
 */
import com.sun.org.apache.xerces.internal.xs.StringList;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Font;
import java.awt.FontMetrics;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.Shape;
import java.awt.geom.Ellipse2D;
import java.awt.image.ImageObserver;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.text.AttributedCharacterIterator;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import java.awt.*;
import static java.lang.Math.pow;
import java.util.Random;
import java.util.concurrent.ExecutorService;
import javax.swing.JInternalFrame;
import javax.swing.JPanel;
import org.math.plot.Plot2DPanel;


public class NewJFrame extends javax.swing.JFrame {

    ArrayList<Distance> distanceList = new ArrayList<Distance>();
    ArrayList<Town> towns = new ArrayList<Town>();
    ArrayList<Point> showTown = new ArrayList<Point>();
    ArrayList<Ant> ants = new ArrayList<Ant>();
    ArrayList<Ant> shuffleAnts = new ArrayList<Ant>();
    ArrayList<Town> shuffleTowns = new ArrayList<Town>();
    ArrayList<Distance> shuffleDistances = new ArrayList<Distance>();
    public ArrayList<Double> prob;
    ArrayList<Distance> tempDistances;
    ArrayList<Double> bestTourForIteration = new ArrayList<Double>();
    ArrayList<Double> solitions = new ArrayList<>();
    private JFrame frame = new JFrame("Ant Colony");
    private JPanel panel = new JPanel();
    int arrayIter[] = new int[150];
    double arrayBest[] = new double[150];


    /**
     * Creates new form NewJFrame
     */
    public NewJFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
                      
private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jTextField3 = new javax.swing.JTextField();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setForeground(new java.awt.Color(241, 28, 37));
        jButton1.setText("Dosya Seç");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setBackground(new java.awt.Color(166, 202, 205));
        jButton2.setForeground(new java.awt.Color(52, 174, 112));
        jButton2.setText("Başlat");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jTextField1.setText("Feramon Sayısı");
        jTextField1.setAutoscrolls(false);
        jTextField1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jTextField1.setDisabledTextColor(new java.awt.Color(239, 29, 29));

        jTextField2.setForeground(new java.awt.Color(126, 47, 242));
        jTextField2.setText("Karınca Sayısı");

        jTextField3.setText("iterasyon Sayısı");

        jButton3.setText("Sonuc Dosyası kaydet");

        jButton4.setText("Grafik Çizdir");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("X-Y Grafiği");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(966, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(90, 90, 90)
                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE))
.addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(46, 46, 46)
                        .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(15, 15, 15)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(468, Short.MAX_VALUE))
        );

        pack();
    }  

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        try {
            // TODO add your handling code here:
            readFile();
        } catch (IOException ex) {
            Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }                                        

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        // TODO add your handling code here:
        //algoritmaya başla
           setupAnts();
        for (int loop = 0; loop < 150; loop++) {
            // shuffleList();
            //olasılıklar hesaplanıcak 
         
            shuffleList();
            System.out.println(loop + " . Shuffle bitti :D");
            bestTourForOneAnt();
        }

        System.out.println("Solitions : " + Collections.min(solitions));


    }                                        

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        // TODO add your handling code here:

        //Grafik ekranını açar.
        //showTown point datasını TownShow JFrame'ine gönderir.
        new TownShow(showTown).setVisible(true);

    }                                        

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        //X-Y Grafiğini Çizdiren Fonksiyonu Çalıştırıyor
        Plot();
    }                                        

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {

                new NewJFrame().setVisible(true);
            }
        });
    }
    public void Plot() {
        double[] x = new double[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        double[] y = new double[]{0, 100, 20, 70 ,10 ,50, 30, 70, 40, 90, 100};
        Plot2DPanel plot = new Plot2DPanel() {
            @Override
            public Dimension getPreferredSize() {
                return new Dimension(600, 400);
            }
        };
        plot.addLegend("WEST");
        plot.addLinePlot("my plot", x, y);
        //plot.setBackground(Color.red);
        // add a line plot to the PlotPanel     
        panel.setLayout(new BorderLayout());
        panel.add(plot);
        frame.add(panel);
        frame.pack();
        frame.setLocation(150, 150);
        frame.setVisible(true);
    }
    //Hiçbir yerde çağırılmadı
    public void calculateMaxIter()
    {
        Constant c = new Constant();
        for(int i = 0; i< c.getMaxIteration(); i++)
        {
            arrayIter[i] = i;
            System.err.println("iter " + i);
        }
        //Plot(arrayIter, arrayBest);
    }


   

   

    public void readFile() throws FileNotFoundException, IOException {

        towns.clear();
        File file = new File("/home/busra/NetBeansProjects/AntColony/src/antcolony/berlin52.tsp");

        //("/home/busra/NetBeansProjects/AntColony/src/antcolony/berlin52.tsp");
        //("/home/db/works/antColony-tsp-java/src/antcolony/berlin52.tsp");
        FileReader fileReader = new FileReader(file);
        String line;
        Point nokta;

        Town town;
        BufferedReader br = new BufferedReader(fileReader);
        boolean okuma = false;
        try {
            line = br.readLine();

            while (!line.equals("EOF")) {
                if (line.equals("NODE_COORD_SECTION")) {
                    okuma = true;
                }
                line = br.readLine();

                if (okuma && !line.equals("EOF")) {
                    //System.out.println(line);
                    String[] point = line.split(" ");
                    town = new Town();
                    town.setName(point[0]);
                    float x = Float.parseFloat(point[1]);
                    float y = Float.parseFloat(point[2]);
                    // System.out.println(String.valueOf(x)+" - " + String.valueOf(y));
                    nokta = new Point((int) x, (int) y);
                    town.setLocation(nokta);
                    towns.add(town);
                }
            }

        } catch (Exception e) {
            br.close();
        }
        /*for(Town t: towns){
            System.out.println("sehirle: "+ t.getName() +" koordinat " + t.getLocation().x + "   " +t.getLocation().y);
        }*/
        computeDistance(towns);

    }

    public void computeDistance(ArrayList<Town> towns) {
        distanceList.clear();

        long computedDistance = 0;
        Distance newDistance;
        for (Town source : towns) {
            for (Town destination : towns) {
                if (!source.getName().equals(destination.getName())) {
                    computedDistance = distance(source.getLocation(), destination.getLocation());
                    newDistance = new Distance();
                    newDistance.setSource(source);
                    newDistance.setDestination(destination);
                    newDistance.setDistance(computedDistance);
                    newDistance.setPheromone(10);
                    distanceList.add(newDistance);
                }
            }
        }

        scalingTownToShow();
    }

    public static long distance(Point a, Point b) {
        double dx = a.x - b.x;
        double dy = a.y - b.y;
        return Math.round(Math.sqrt(dx * dx + dy * dy));
    }

    // scale each point  to show towns on my  jframe 
    public void scalingTownToShow() {

        int xMax, yMax, xMin, yMin, x, y, X, Y, screenMaxX = 1250, screenMinX = 25, screenMaxY = 550, screenMinY = 35;
        ArrayList<Integer> xList = new ArrayList<Integer>();
        ArrayList<Integer> yList = new ArrayList<Integer>();
        Point p;
        for (Town t : towns) {

            x = t.getLocation().x;
            y = t.getLocation().y;
            xList.add(x);
            yList.add(y);
        }

        xMax = Collections.max(xList);
        yMax = Collections.max(yList);
        xMin = Collections.min(xList);
        yMin = Collections.min(yList);

        double xRate = (double) (screenMaxX - screenMinX) / (xMax - xMin);
        double yRate = (double) (screenMaxY - screenMinY) / (yMax - yMin);

        for (Town t : towns) {
            X = (int) ((t.getLocation().x - xMin) * xRate) + screenMinX;
            Y = (int) ((t.getLocation().y - yMin) * yRate) + screenMinY;
            p = new Point(X, Y);

            showTown.add(p);
        }
        // showTowns();
    }

    public void probTo(Ant ant) {
        //her ant için gidilebilecek şehirlerin listesi
        //formül
        double denom = 0.0;
        Town currenTown = ant.currentTown;
        boolean cont = false;

        double numarator = 0.0;
        double computedFeromon[] = new double[52];
        tempDistances = new ArrayList<Distance>();
        int i = 0;
        for (int l = 0; l < towns.size(); l++) {
            if (!ant.visited.get(l)) {
                if (!cont) {
                    for (int k = 0; k < distanceList.size(); k++) {
                        if (distanceList.get(k).getSource().getName().equals(currenTown.getName())) {

                            denom += pow(distanceList.get(k).getPheromone(), 2)
                                    * pow((double) 1 / distanceList.get(k).getDistance(), 3);//1. alpha 2.beta 
                            computedFeromon[i] = pow(distanceList.get(k).getPheromone(), 2)
                                    * pow((double) 1 / distanceList.get(k).getDistance(), 3);//1. alpha 2.beta 
                            tempDistances.add(distanceList.get(k));

                            i++;
                        }
                        cont = true;
                    }
                }

            } else {
               tempDistances.add(null);

            }
        }
//tempDistances.add(null);
        //System.err.println("tempdistance + " + tempDistances.size());

        cont = false;
        prob = new ArrayList<Double>();
        int j = 0, a = 0;
        for (int k = 0; k < towns.size(); k++) {
            if (ant.visited.get(k)) {
                //System.out.println(ant.currentIndex + ". index shuffle da " + shuffleTowns.get(ant.currentIndex).getName() + " k = " + ant.visited.get(k));
                prob.add(0.0);

            } else {
                numarator = computedFeromon[a];
                prob.add((double) numarator / denom);
                a++;
            }

        }

        for (int f = 0; f < prob.size(); f++) {
            if (tempDistances.get(f) != null && prob.get(f) == Collections.max(prob)) {
                // System.out.println(ant.name + " için prob " + prob.get(f) + " gitmesi gerek  " + tempDistances.get(f).getDestination().getName());
                setVisitedTown(ant, tempDistances.get(f).getDestination(), ant.currentIndex);
                setVisitedTown(ant, distanceList.get(f).getDestination(), ant.currentIndex);

                increasePheromone(tempDistances.get(f));
                // feramonları güncelle
                //döngünün sonlanmasını bekle
            } else {
                reducePheromone(tempDistances.get(f));
                                setVisitedTown(ant, distanceList.get(f).getDestination(), ant.currentIndex);

            }

        }

        //besttour u bul
        // System.out.println(ant.name + "  karnca için  " + Collections.max(prob) +" index of " + prob.indexOf(Collections.max(prob)));
        //System.out.println(ant.name + "  karnca için  " + Collections.max(prob) + " nextto " + tempDistances.get(prob.indexOf(Collections.max(prob))).getDestination().getName());
    }

    public void bestTourForOneAnt() {
        //karıncalar arasından turu en iyi olanı bulacağız 
        //bunu bir listeye ekliyeceğiz
        //
        System.out.println("Şu an ben best tourdayım");

        long tourLength = 0;
        for (Ant a : ants) {
            for (int k = 0; k < a.tours.size() - 1; k++) {
                if(!a.tours.get(k).getName().equals(a.tours.get(k+1).getName()))
                    tourLength += addTourDistance(a.tours.get(k), a.tours.get(k + 1));
            }
           /// System.out.println(a.name + " karıncası için en iyi tur " + tourLength);
            a.tourLength = tourLength;
            bestTourForIteration.add((double) a.tourLength);
            tourLength = 0;
            a.tours.clear();
           // a.visited.clear();
        }

      
        System.out.println("en iyi best top of : " + Collections.min(bestTourForIteration));
        solitions.add(Collections.min(bestTourForIteration));
        bestTourForIteration.clear();

    }

    public void increasePheromone(Distance distance) {
        if (distance != null) {
            distance.setPheromone(distance.getPheromone() + 1);
            System.out.println(distance.getSource().getName() + " - " + distance.getDestination().getName() + " atış " + distance.getPheromone());
        }
    }

    public void reducePheromone(Distance distance) {
        if (distance != null) {
            distance.setPheromone(distance.getPheromone() - 0.1);
            System.out.println(distance.getSource().getName() + " - " + distance.getDestination().getName() + " buharlaşma " + distance.getPheromone());
        }

    }

    public void setupAnts() {

        int townSize = towns.size();
        int antSize = townSize;
        //ants.clear();
        /*shuffleAnts.clear();
        shuffleDistances.clear();
        shuffleTowns.clear();*/
        for (int i = 0; i < antSize; i++) {
            Ant ant = new Ant();
            ant.name = String.valueOf(i + 1);
            ant.visited = new ArrayList<Boolean>();
            ant.tours = new ArrayList<Town>();
          
            for (int j = 0; j < townSize; j++) {
                ant.visited.add(false);
            }
            ants.add(ant);
        }
        System.out.println("Karıncalar oluştu");
        shuffleTowns = towns;
        shuffleAnts = ants;
        shuffleDistances = distanceList;

     

    }

    public void shuffleList() {
        long seed = System.nanoTime();

        Collections.shuffle(shuffleAnts);
        Collections.shuffle(shuffleTowns, new Random(seed));
        Collections.shuffle(shuffleDistances, new Random(seed));
        for (int k = 0; k < shuffleAnts.size(); k++) {
            setVisitedTown(shuffleAnts.get(k), shuffleTowns.get(k), k);
            //  System.out.println(shuffleAnts.get(k).name + " . karınca " + shuffleTowns.get(k).getName() + ". şehirde bulunuyor.");

        }

        for (Ant a : shuffleAnts) {
            probTo(a);
        }
    }

    public void setVisitedTown(Ant ant, Town town, int index) {

        ant.tours.add(town);
        ant.visited.add(Integer.parseInt(town.getName()) - 1, true);
        ant.currentTown = town;
        ant.currentIndex = index;

    }

    public long addTourDistance(Town t, Town t1) {

        for (Distance d : distanceList) {
            if (d.getSource().getName().equals(t.getName()) && d.getDestination().getName().equals(t1.getName())) {
                return d.getDistance();
            }
        }
        return -1;
    }


    // Variables declaration - do not modify                     
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    // End of variables declaration                   

}
